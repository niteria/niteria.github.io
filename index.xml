<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bartosz Nitka</title>
    <link>http://niteria.github.io/</link>
    <description>Recent content on Bartosz Nitka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2019 Bartosz Nitka</copyright>
    <lastBuildDate>Thu, 02 Jun 2022 22:56:35 +0200</lastBuildDate>
    
	<atom:link href="http://niteria.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Repairing a Broken Multimeter Part 2</title>
      <link>http://niteria.github.io/posts/repairing-a-broken-multimeter-part-2/</link>
      <pubDate>Thu, 02 Jun 2022 22:56:35 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/repairing-a-broken-multimeter-part-2/</guid>
      <description>In Repairing a Broken Multimeter, I identified a faulty capacitor C18 and desoldered it from the board. I wasn&amp;rsquo;t sure what its purpose was and what to replace it with.
Recently one reader, Marcin, who&amp;rsquo;s interested in how multimeters work emailed me telling me that C18 is used in capacitance measurement, that the correct value is 1nF and that it helps with linearity for values lower than 4nF.
I opened my multimeter and looked at the datasheet again.</description>
    </item>
    
    <item>
      <title>Nix Notes: Overriding Haskell Packages</title>
      <link>http://niteria.github.io/posts/nix-notes-overriding-haskell-packages/</link>
      <pubDate>Tue, 02 Jun 2020 14:58:10 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/nix-notes-overriding-haskell-packages/</guid>
      <description>Setup In one of the projects, I use a pinned version of nixpkgs based on miso. There are two advantages to that, one is that I know that miso builds with that version, and the second one is that I can take advantage of miso&amp;rsquo;s cachix cache and not compile everything from scratch.
In the most basic form, it looks like this.
File nixpkgs.nix:
let bootstrap = import &amp;lt;nixpkgs&amp;gt; {}; misoTarball = bootstrap.</description>
    </item>
    
    <item>
      <title>Quick Haskell Trick</title>
      <link>http://niteria.github.io/posts/quick-haskell-trick/</link>
      <pubDate>Mon, 04 May 2020 01:03:09 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/quick-haskell-trick/</guid>
      <description>The Haskell REPL (Read Print Eval Loop) - GHC interpreter, ghci invoked with:
$ ghci  or:
$ stack repl  or:
$ cabal new-repl  or:
$ cabal repl  is an environment enabling fast iteration.
You can test a particular function and that&amp;rsquo;s cool and all, but you can also run an entire program in the interpreter. You do that with:
ghci&amp;gt; :main  or
ghci&amp;gt; main  The flow is as follows:</description>
    </item>
    
    <item>
      <title>Fixing Yakuake Shift&#43;Tab</title>
      <link>http://niteria.github.io/posts/fixing-yakuake-shift-tab/</link>
      <pubDate>Wed, 22 Apr 2020 20:43:09 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/fixing-yakuake-shift-tab/</guid>
      <description>I upgraded my Ubuntu recently from 19.04 (Disco) to 19.10 (Eoan Ermine). At some point, I noticed that Shift+Tab stopped working in vim. I use nvim and have Tab configured to move to the next tab and Shift+Tab configured to move to the previous tab. Tab worked, Shift+Tab didn&amp;rsquo;t.
It&amp;rsquo;s two lines in my .vimrc:
nmap &amp;lt;Tab&amp;gt; :tabnext&amp;lt;enter&amp;gt; nmap &amp;lt;S-Tab&amp;gt; :tabprev&amp;lt;enter&amp;gt;  Maybe it&amp;rsquo;s nvim? At first, I suspected it&amp;rsquo;s a problem with nvim since I upgraded it as well and there is some old article mentioning how to get Shift+Tab to work.</description>
    </item>
    
    <item>
      <title>Repairing a Broken Multimeter</title>
      <link>http://niteria.github.io/posts/repairing-a-broken-multimeter/</link>
      <pubDate>Thu, 12 Mar 2020 15:32:21 +0100</pubDate>
      
      <guid>http://niteria.github.io/posts/repairing-a-broken-multimeter/</guid>
      <description>&lt;p&gt;In December 2017 my multimeter broke.
It no longer measured resistance correctly.
For low resistances, the numbers looked alright, but with bigger resistances, the value didn&amp;rsquo;t go higher than about &lt;code&gt;40kΩ&lt;/code&gt;.
I only had one multimeter, so I didn&amp;rsquo;t have anything to compare against, so how did I determine that it&amp;rsquo;s broken for sure?&lt;/p&gt;

&lt;p&gt;It seemed to measure &lt;code&gt;1kΩ&lt;/code&gt; accurately, so I used Ohm&amp;rsquo;s Law and connected 10 of the &lt;code&gt;1kΩ&lt;/code&gt; resistors in series.
It read about &lt;code&gt;7kΩ&lt;/code&gt;. Uh, oh.&lt;/p&gt;

&lt;p&gt;I ordered a new one, same model.
I complained to my friends on Facebook and got some pity likes.
I didn&amp;rsquo;t know much about electronics, so I accepted that the old one is broken and only trusted the new one.
Until it broke as well. In a similar way.&lt;/p&gt;

&lt;p&gt;How did I break it?
To be honest, I don&amp;rsquo;t know.
I assume it was a user error.
If I had to guess I either tried to measure the resistance on a powered circuit or tried to measure current with the red lead still in the Voltage/Resistance socket.&lt;/p&gt;

&lt;p&gt;Last year I asked Santa for a different multimeter as I was tired of buying them myself.
After learning some more electronics theory I decided to take a look and try to fix it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why did no one tell me about gdb-add-index?</title>
      <link>http://niteria.github.io/posts/why-did-no-one-tell-me-about-gdb-add-index/</link>
      <pubDate>Sat, 20 Apr 2019 11:32:23 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/why-did-no-one-tell-me-about-gdb-add-index/</guid>
      <description>I&amp;rsquo;ve been exploring TensorFlow internals in the past couple of weeks.
Doing that required me to run some python scripts with a debug version of TensorFlow, set some breakpoints, examine some values, modify the script, repeat. You know, general sleuthing.
TensorFlow core functionality is written in C++. The python package is a wrapper around C++ code + libraries at the python layer. The way that python interacts with TensorFlow core is by loading a shared object.</description>
    </item>
    
    <item>
      <title>Debugging a Safe Module</title>
      <link>http://niteria.github.io/posts/debugging-a-safe-module/</link>
      <pubDate>Thu, 06 Oct 2016 12:36:55 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/debugging-a-safe-module/</guid>
      <description>TL;DR: change -XSafe to -XTrustworthy.
I&amp;rsquo;ve found myself needing to add some trace statements to System/Environment.hs. The module is marked Safe, so when you try to:
import Debug.Trace (trace)  you get the following error:
Debug.Trace: Can&#39;t be safely imported! The module itself isn&#39;t safe.  I don&amp;rsquo;t know anything about Safe Haskell and I didn&amp;rsquo;t want to learn at the time. Removing {-# LANGUAGE Safe #-} made the Safe modules depending on System.</description>
    </item>
    
    <item>
      <title>A Hacky Way to Send Notifications From a Development Machine on iTerm2</title>
      <link>http://niteria.github.io/posts/a-hacky-way-to-send-notifications-from-a-development-machine-on-iterm2/</link>
      <pubDate>Tue, 19 Jan 2016 00:49:57 +0200</pubDate>
      
      <guid>http://niteria.github.io/posts/a-hacky-way-to-send-notifications-from-a-development-machine-on-iterm2/</guid>
      <description>When hacking on something in a language that&amp;rsquo;s compiled, some compiles take a long time. So long that it doesn&amp;rsquo;t make sense to wait and watch it. You can do some lightweight tasks in the meantime - respond to emails, review diffs&amp;hellip; The problem is, unless you leave your terminal visible, you won&amp;rsquo;t know it&amp;rsquo;s done the moment it is done.
The solution is to send a notification once it&amp;rsquo;s compiled.</description>
    </item>
    
  </channel>
</rss>